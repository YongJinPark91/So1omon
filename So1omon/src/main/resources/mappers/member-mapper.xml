<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
  	
  	<resultMap type="Member" id="memberResult">
  		<result column="USER_NO" property="userNo" />
  		<result column="USER_ID" property="userId" />
  		<result column="USER_PWD" property="userPwd" />
  		<result column="USER_NAME" property="userName" />
  		<result column="NICKNAME" property="nickName" />
  		<result column="ADDRESS" property="address" />
  		<result column="EMAIL" property="email" />
  		<result column="PHONE" property="phone" />
  		<result column="POINT" property="point" />
  		<result column="PROFILE" property="profile" />
  		<result column="ENROLL_DATE" property="enrollDate" />
  		<result column="MODIFY_DATE" property="modifyDate" />
  		<result column="STATUS" property="status" />
  		<result column="USER_TOKEN" property="userToken" />
  	</resultMap>

  	<resultMap type="Point" id="pointResult">
  		<result column="POINT_NO" property="pointNo" />
  		<result column="USER_NO" property="userNo" />
  		<result column="POINT_DATE" property="pointDate" />
  		<result column="REASON" property="reason" />
  		<result column="POINT" property="point" />
  	</resultMap>
  	
  	<select id="loginMember" resultMap="memberResult">
		select
			USER_NO,
			USER_ID,
			USER_PWD,
			USER_NAME,
			NICKNAME,
			ADDRESS,
			EMAIL,
			PHONE,
			POINT,
			PROFILE,
			ENROLL_DATE,
			MODIFY_DATE,
			STATUS,
			USER_TOKEN
		from member
		where status = 'Y'
		and user_id = #{userId}
  	</select>

	<insert id="insertMember">
		insert into member
		(
		USER_NO
		,USER_ID
		,USER_PWD
		,USER_NAME
		,NICKNAME
		,ADDRESS
		,EMAIL
		,PHONE
		)
		values
		(
		 seq_uno.nextval
		,#{userId}
		,#{userPwd}
		,#{userName}
		,#{nickName}
		,#{address}
		,#{email}
		,#{phone}
		)
	</insert>
	
	<select id="findIdUsePhone" resultMap="memberResult">
		select *
		from member
		where phone = #{phone}
		and user_name = #{userName}
		and status = 'Y'
	</select>
	
	<select id="findIdUseEmail" resultMap="memberResult">
		select *
		from member
		where email = #{email}
		and user_name = #{userName}
		and status = 'Y'
	</select>
	
	<update id="findIdChangePwd">
		update member
		   set user_pwd = #{userPwd}
		 where user_name = #{userName}
	</update>

	<select id="idCheck" resultType="_int">
		select 
			    count(*)
		   from member
		  where user_id = #{checkId}
	</select>

	<select id="emailCheck" resultType="_int">
		select 
			    count(*)
		   from member
		  where email = #{email}
	</select>
	
	<select id="showMyWish" resultType="_int">
		select count(*)
		from wish
		where user_no = #{checkEmail}
	</select>
	
	<update id="updatePwd">
		update
		       member
		   set user_pwd = #{newPwd}
		 where user_no = #{m}
	</update>

	<update id="updateMember">
		update 
  			   member
  	       set user_name = #{userName}
  	         , nickname = #{nickName}
  		     , profile = #{profile}
  		     , phone = #{phone}
  		     , address = #{address}
  		     , email = #{email}
  		     , modify_date = sysdate
  		 where user_id = #{userId}
	</update>
	
	<select id="selectMemberListAD" resultMap="memberResult">
		select
		       user_no
		     , user_id
		     , user_name
		     , nickname
		     , point
		     , to_char(enroll_date, 'YYYY-MM-DD') as "enroll_date"
		     , status
		  from member
		 where user_id like '%' || #{keyword} || '%'
            or user_name like '%' || #{keyword} || '%'
            or nickname like '%' || #{keyword} || '%'
            or phone like '%' || #{keyword} || '%'
            or address like '%' || #{keyword} || '%'
		 order
		    by user_no desc
	</select>


	<select id="selectMemberAD" resultMap="memberResult">
		select
		       user_no
		     , user_id
		     , user_name
		     , nickname
		     , address
		     , email
		     , phone
		     , point
		     , enroll_date
		     , modify_date
		  from member
		 where user_no = #{userNo}
		 order
		    by user_no desc
	</select>
	
	<update id="deleteMember" >
		update
		       member
		   set status = 'N'
		 where user_no = #{userNo}
		       
	</update>
  	<select id="findKakao" resultMap="memberResult">
		select
			USER_NO,
			USER_ID,
			USER_PWD,
			USER_NAME,
			NICKNAME,
			ADDRESS,
			EMAIL,
			PHONE,
			POINT,
			PROFILE,
			ENROLL_DATE,
			MODIFY_DATE,
			STATUS,
			USER_TOKEN
		from member
		where status = 'Y'
		and email = #{email}
  	</select>
  	
	<insert id="insertMemberKakao">
		insert into member
		(
		USER_NO
		,USER_ID
		,USER_PWD
		,USER_NAME
		,NICKNAME
		,ADDRESS
		,EMAIL
		,PHONE
		,profile
		,USER_TOKEN
		)
		values
		(
		 seq_uno.nextval
		,#{userId}
		,#{userPwd}
		,#{userName}
		,#{nickName}
		,#{address}
		,#{email}
		,#{phone}
		,#{profile}
		,#{userToken}
		)
	</insert>
	
	<update id="updateKakao">
		update member
		   set NICKNAME = #{nickName},
		       profile = #{profile}
		 where email = #{email}
		 and status = 'Y'
	</update>
	
	<select id="findNomalMember" resultType="_int">
		
		select count(*)
		from member
		where email = #{email}
		and USER_TOKEN is null
		and status = 'Y'
		
	</select>
	
	<update id="enrollMemberKakao">
		update member
		   set NICKNAME = #{nickName},
		       profile = #{profile},
		       user_id = #{email},
		       USER_TOKEN = 'kakao'
		 where email = #{email}
		 and status = 'Y'
	</update>
	
	<select id="findEmail" resultType="_int">
		select count(*)
		from member
		where email = #{email}
		and status = 'Y'
	</select>
	
	<insert id="insertWishList" >
		INSERT INTO wish (product_no, user_no)
		SELECT product_no, seq_uno.currval
		FROM wish
		WHERE user_no = #{token}
	</insert>
	
	<delete id="deleteWish">
		delete wish
		where user_no = #{token}
	</delete>
	
	
	
</mapper>
